import { BaseClient } from "../../../src/client/BaseClient.js";
import { ClientConfiguration } from "../../../src/config/ClientConfiguration.js";
import { CommonSilentFlowRequest } from "../../../src/request/CommonSilentFlowRequest.js";
import { AuthenticationResult } from "../../../src/response/AuthenticationResult.js";
import { CacheOutcome } from "../../../src/utils/Constants.js";
import { IPerformanceClient } from "../../../src/telemetry/performance/IPerformanceClient.js";
/** @internal */
export declare class SilentFlowClient extends BaseClient {
    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient);
    /**
     * Retrieves token from cache or throws an error if it must be refreshed.
     * @param request
     */
    acquireCachedToken(request: CommonSilentFlowRequest): Promise<[AuthenticationResult, CacheOutcome]>;
    private setCacheOutcome;
    /**
     * Helper function to build response object from the CacheRecord
     * @param cacheRecord
     */
    private generateResultFromCacheRecord;
}
//# sourceMappingURL=SilentFlowClient.d.ts.map